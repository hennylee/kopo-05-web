/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-06-29 01:09:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.kopo.member.dao.LoginDAO;
import kr.ac.kopo.util.JDBCClose;
import kr.ac.kopo.member.vo.MemberVO;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import kr.ac.kopo.util.ConnectionFactory;
import java.sql.Connection;

public final class loginProcess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kr.ac.kopo.util.ConnectionFactory");
    _jspx_imports_classes.add("kr.ac.kopo.member.vo.MemberVO");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("kr.ac.kopo.member.dao.LoginDAO");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("kr.ac.kopo.util.JDBCClose");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// POST방식일때 response 인코딩
	response.setCharacterEncoding("utf-8");

	/* 1. 파라미터 추출 */
	String paramId = request.getParameter("id");
	String paramPwd = request.getParameter("password");
	
	/* 2-1. 객체 생성 및 초기화 */
	// 로그인 입력값을 기억하는 객체
	MemberVO memberVO = new MemberVO();
	memberVO.setId(paramId);
	memberVO.setPassword(paramPwd);
	
	/* 2-2. DB에서 로그인 수행 */
	LoginDAO dao = new LoginDAO();
	
	// 사용자의 정보를 기억하는 객체
	MemberVO userVO = dao.login(memberVO);
	
	
	/* 
		로그인 성공 시 => userVO != null
		로그인 실패 시 => userVO == null
	*/
	
	String msg = null;
	String url = null;
	
	/*  
		sendRedirect와 forward를 쓸때, root로 인식하는 디렉토리 경로가 다르기 때문에 url이 다르다. 
	*/
		
	if(userVO == null){
		msg = "아이디 또는 패스워드를 잘못 입력하셨습니다.";
		url = "login.jsp";
	} else {
		msg = "로그인을 성공하였습니다.";
		url = "/Mission-Web/index.jsp";
		
		/* 3. 세션에 등록 */
		session.setAttribute("userVO", userVO);
	}
	 
	pageContext.setAttribute("msg", msg);
	pageContext.setAttribute("url", url);

/*  
	sendRedirect를 쓰는 방법
*/
//	response.sendRedirect(url);
//	pageContext.setAttribute("url", url + "?msg=" + msg );
	

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	alert('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("')\r\n");
      out.write("	/* \r\n");
      out.write("		서블릿에서 el하고 자바코드가 먼저 해석되기 때문에 작은 따옴표를 꼭 써줘야 한다.  \r\n");
      out.write("		작은따옴표를 안쓰면 변수로 인식하게 된다. \r\n");
      out.write("		(1) 서버가 해석이 되어서 -> (2) 웹라우저로 날라온 다음에 -> (3) 스크립트 해석이 되기 때문이다. \r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	/* 4. 존재여부에 따른 페이지를 이동(로그인 성공 : index.jsp / 로그인 실패 : login.jsp) */\r\n");
      out.write("	/* forward나 sendRedirect보다 깔끔한 방식 */\r\n");
      out.write("	location.href = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${url }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
