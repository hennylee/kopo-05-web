/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-06-30 06:39:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.ac.kopo.board.vo.BoardFileVO;
import java.io.File;
import java.util.Enumeration;
import kr.ac.kopo.util.KopoFileNamePolicy;
import com.oreilly.servlet.MultipartRequest;
import kr.ac.kopo.board.vo.BoardVO;
import kr.ac.kopo.board.dao.BoardDAO;
import kr.ac.kopo.member.vo.MemberVO;
import kr.ac.kopo.util.JDBCClose;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import kr.ac.kopo.util.ConnectionFactory;
import java.sql.Connection;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("kr.ac.kopo.member.vo.MemberVO");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("kr.ac.kopo.board.vo.BoardVO");
    _jspx_imports_classes.add("kr.ac.kopo.util.JDBCClose");
    _jspx_imports_classes.add("kr.ac.kopo.util.KopoFileNamePolicy");
    _jspx_imports_classes.add("kr.ac.kopo.board.dao.BoardDAO");
    _jspx_imports_classes.add("kr.ac.kopo.util.ConnectionFactory");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("kr.ac.kopo.board.vo.BoardFileVO");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");

	/* 
		파일 경로 구분자 : (1) \\ (윈도우 방식) , (2) / (리눅스) 
	*/
	// 파일 저장 경로
	String saveDirectory = "C:/kopo-05-web/code/Mission-Web/WebContent/upload";

	/* 
		<생성자>
		MultipartRequest(
			javax.servlet.http.HttpServletRequest request, 
			java.lang.String saveDirectory, 
			int maxPostSize, 
			java.lang.String encoding, 
			FileRenamePolicy policy
		) 
	*/
	
	// MultipartRequest 객체
	MultipartRequest multiRequest = new MultipartRequest(
											request,
											saveDirectory,
											1024 * 1024 * 3,
											"utf-8",
											new KopoFileNamePolicy()
									);
	
	/* 1-1. 입력될 게시글 정보 추출 */
	String title = multiRequest.getParameter("title");
	String writer = multiRequest.getParameter("writer");
	String content = multiRequest.getParameter("content");
	
	BoardDAO dao = new BoardDAO();
	
	/* 1-2. 게시물 번호 추출 */
	int boardNo = dao.selectNo();
	
	BoardVO board = new BoardVO();
	board.setTitle(title);
	board.setWriter(writer);
	board.setContent(content);
	board.setNo(boardNo);
	
	/* 2-1. 게시글 저장(t_board) */
	dao.insert(board);
	
	/* 1-3. 저장될 첨부파일 추출  */
    Enumeration files =	multiRequest.getFileNames(); // return형이 Enumeration( 구, Iterator )
 												     
	while(files.hasMoreElements()){
	 	// 폼 데이터의 name 속성을 뽑아내기
		String fileName = (String) files.nextElement(); 
	 	
	 	// 전송된 파일 객체 받기
	 	File f = multiRequest.getFile(fileName);

	 	// 전송된 파일이 존재할 때만 수행
	 	if(f != null){
		 	// 파일 orginal 명 받아오기
		    String fileOriName = multiRequest.getOriginalFileName(fileName);
		 	
		 	// 파일 save할 때 파일명 받아오기
		 	String fileSaveName = multiRequest.getFilesystemName(fileName);
		 	
		 	// 파일 객체의 사이즈 받아오기
		 	int fileSize = (int) f.length();
		 	
		 	BoardFileVO fileVO = new BoardFileVO();
		 	fileVO.setFileOriName(fileOriName);
		 	fileVO.setFileSaveName(fileSaveName);
		 	fileVO.setFileSize(fileSize);
		 	fileVO.setBoardNo(boardNo);
		
		 	/* 2-2. 첨부파일 저장(t_board_file) */
			dao.insertFile(fileVO);
	
	
	 	}
	 	
	}
	
	
/*
<파일 업로드 안할때 저장하기>
	
	String title = request.getParameter("title");
	
	// input 태그의 type="hidden"으로 날라온 값
	String writer = request.getParameter("writer"); 
//	String writer = ((MemberVO)session.getAttribute("userVO")).getId();
	
	String content = request.getParameter("content");
	
	BoardVO board = new BoardVO();
	board.setTitle(title);
	board.setWriter(writer);
	board.setContent(content);
	
	BoardDAO dao = new BoardDAO();
	dao.insert(board);
*/

      out.write("    \r\n");
      out.write("<script>\r\n");
      out.write("	alert('새글 등록이 완료되었습니다.')\r\n");
      out.write("	location.href = \"list.jsp\"\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
