/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-07-20 04:36:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax.exam03;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajaxModule_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- httpRequest 실행 파일 -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"httpRequest.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	function clickBtn() {\r\n");
      out.write("		\r\n");
      out.write("		let name = document.inputForm.name.value\r\n");
      out.write("		let age = document.inputForm.age.value\r\n");
      out.write("		let addr = document.inputForm.addr.value\r\n");
      out.write("		\r\n");
      out.write("		httpRequest = getXMLHttpRequest()\r\n");
      out.write("		//alert(httpRequest)\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 비동기 통신을 하기 위해서 sendProcess()라는 표준화된 모듈을 사용하는 것이 목적이다. \r\n");
      out.write("		\r\n");
      out.write("		// 1단계\r\n");
      out.write("// 		sendProcess('POST', 'sample.jsp', 'name=홍길동&나이=24&주소=서울시 서초구', callback)\r\n");
      out.write("\r\n");
      out.write("		// 2단계\r\n");
      out.write("		let params = 'name=' + name + '&age=' + age + '&addr=' + addr\r\n");
      out.write("// 		sendProcess('POST', 'sample.jsp', params, callback)\r\n");
      out.write("\r\n");
      out.write("		// 3단계\r\n");
      out.write("// 		let params = {name : name, age : age, addr : addr}\r\n");
      out.write("		sendProcess('GET', 'sample.jsp', params, callback)\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function callback(){\r\n");
      out.write("		let msg = ''\r\n");
      out.write("			\r\n");
      out.write("			switch(httpRequest.readyState) {\r\n");
      out.write("			case 1:\r\n");
      out.write("				msg += 'Loading...\\n'\r\n");
      out.write("				break;\r\n");
      out.write("			case 2:\r\n");
      out.write("				msg += 'Loaded...\\n'\r\n");
      out.write("				break;\r\n");
      out.write("			case 3:\r\n");
      out.write("				msg += 'Interactive...\\n'\r\n");
      out.write("				break;\r\n");
      out.write("			case 4:\r\n");
      out.write("				msg += 'Complete...\\n'\r\n");
      out.write("				if(httpRequest.status == 200) {\r\n");
      out.write("					msg += '웹서버에서 정상적으로 수행..\\n'	\r\n");
      out.write("					msg += '실행결과 : ' + httpRequest.responseText + '\\n'	\r\n");
      out.write("				}\r\n");
      out.write("				else {\r\n");
      out.write("					msg += '웹서버에서 에러가 발생..\\n'	\r\n");
      out.write("					msg += '오류 코드 : ' + httpRequest.status + '\\n'	\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				break;\r\n");
      out.write("			}\r\n");
      out.write("					\r\n");
      out.write("			debugTrace(msg)\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function debugTrace(msg) {\r\n");
      out.write("			let debug = document.getElementById(\"debug\")\r\n");
      out.write("			debug.value += msg\r\n");
      out.write("		}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h2>XMLHTTPRequest 모듈을 이용한 예제파일</h2>\r\n");
      out.write("\r\n");
      out.write("	<form name=\"inputForm\" action=\"\">\r\n");
      out.write("		<textarea rows=\"10\" cols=\"80\" id=\"debug\"></textarea><br>\r\n");
      out.write("		\r\n");
      out.write("		이름 : <input type=\"text\" name=\"name\"><br>\r\n");
      out.write("		나이 : <input type=\"text\" name=\"age\"><br>\r\n");
      out.write("		주소 : <input type=\"text\" name=\"addr\"><br>\r\n");
      out.write("		\r\n");
      out.write("		<button type=\"button\" onclick=\"clickBtn()\">서버에 자료 요청</button>\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
